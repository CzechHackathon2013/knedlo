/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-09-16 16:01:30 UTC)
 * on 2013-10-20 at 07:52:16 UTC 
 * Modify at your own risk.
 */

package com.appspot.knedloreader.knedlo.model;

/**
 * Model definition for Handler.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the knedlo. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Handler extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encoding;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ErrorManager errorManager;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Filter filter;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Formatter formatter;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Level level;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEncoding() {
    return encoding;
  }

  /**
   * @param encoding encoding or {@code null} for none
   */
  public Handler setEncoding(java.lang.String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ErrorManager getErrorManager() {
    return errorManager;
  }

  /**
   * @param errorManager errorManager or {@code null} for none
   */
  public Handler setErrorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Filter getFilter() {
    return filter;
  }

  /**
   * @param filter filter or {@code null} for none
   */
  public Handler setFilter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Formatter getFormatter() {
    return formatter;
  }

  /**
   * @param formatter formatter or {@code null} for none
   */
  public Handler setFormatter(Formatter formatter) {
    this.formatter = formatter;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Level getLevel() {
    return level;
  }

  /**
   * @param level level or {@code null} for none
   */
  public Handler setLevel(Level level) {
    this.level = level;
    return this;
  }

  @Override
  public Handler set(String fieldName, Object value) {
    return (Handler) super.set(fieldName, value);
  }

  @Override
  public Handler clone() {
    return (Handler) super.clone();
  }

}
